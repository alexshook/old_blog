<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Alex Shook]]></title>
  <link href="http://alexshook.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://alexshook.com/"/>
  <updated>2015-07-11T16:38:58-04:00</updated>
  <id>http://alexshook.com/</id>
  <author>
    <name><![CDATA[Alex Shook]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learn Ruby the Hard Way (Again)]]></title>
    <link href="http://alexshook.com/blog/learn-ruby-the-hard-way-again/"/>
    <updated>2015-04-29T23:27:15-04:00</updated>
    <id>http://alexshook.com/blog/learn-ruby-the-hard-way-again</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been more than a year since I last did <a href="http://learnrubythehardway.org/book/">Learn Ruby the Hard Way</a>. Now that Ruby is at version 2.2, I&rsquo;ve been thinking that it&rsquo;s probably a good time for a basics refresher. I only got through Exercise 34 or so before WDI started, and I remember it being one of the more difficult beginning Ruby things that I did.</p>

<p>It&rsquo;s really interesting to see how I look at things now compared to 1+ years ago. <!-- more --></p>

<p>I started off with <a href="http://learnrubythehardway.org/book/ex1.html">Exercise 1</a>, which is pretty basic. All you do in Exercise 1 is <code>puts</code> a bunch of strings. I predicted that I would move through the early exercises quickly.</p>

<p>I haven&rsquo;t. I completed Exercise 1 on Monday and haven&rsquo;t even gotten to Exercise 2 yet. While I was putsing the Exercise 1 strings, I started thinking about what C actually has to do to give us something as nice as typing <code>puts 'Hello!'</code> to get <code>Hello!</code> to appear in the console.</p>

<p>Compared to Java&rsquo;s <code>public class blah blah System.out.println</code> or even PHP&rsquo;s <code>echo</code> (which I always thought was vaguely unclear), <code>puts</code> is fantastically beautiful. And I never cared about it at all until now.</p>

<p>Where does it come from? How does it do what it does?</p>

<p>Puts is a kernel method, and it&rsquo;s <a href="http://ruby-doc.org/core-2.2.2/IO.html#method-i-puts">listed in I/O</a> in the Ruby documentation. Until I read the documentation, I never knew you could <code>puts</code> like this:</p>

<p><code>puts("this", "is", "a", "test")</code></p>

<p>with strings separated by commas. I can&rsquo;t think of anything I&rsquo;d ever want to use that for, but it&rsquo;s still interesting. Things got even more interesting when I took a look at the source code. Here&rsquo;s what C does when you <code>puts</code> in Ruby:</p>

<pre><code>               VALUE
rb_io_puts(int argc, const VALUE *argv, VALUE out)
{
    int i;
    VALUE line;

    /* if no argument given, print newline. */
    if (argc == 0) {
        rb_io_write(out, rb_default_rs);
        return Qnil;
    }
    for (i=0; i&lt;argc; i++) {
        if (RB_TYPE_P(argv[i], T_STRING)) {
            line = argv[i];
            goto string;
        }
        if (rb_exec_recursive(io_puts_ary, argv[i], out)) {
            continue;
        }
        line = rb_obj_as_string(argv[i]);
      string:
        rb_io_write(out, line);
        if (RSTRING_LEN(line) == 0 ||
            !str_end_with_asciichar(line, '\n')) {
            rb_io_write(out, rb_default_rs);
        }
    }

    return Qnil;
}
</code></pre>

<p>Looks kind of crazy. I think I got about 50% of that post-Google, and that&rsquo;s probably on the optimistic side. I did learn that a <code>Qnil</code> is the C constant for Ruby&rsquo;s nil value. That might come in handy if I ever get ambitious and want to write an extension.</p>

<p>I was going to start <a href="http://c.learncodethehardway.org/book/">Learn C the Hard Way</a> after I finished with Ruby, but instead I think I&rsquo;m going to start right away.</p>
]]></content>
  </entry>
  
</feed>
