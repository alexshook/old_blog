<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Alex Shook]]></title>
  <link href="http://alexshook.github.io/atom.xml" rel="self"/>
  <link href="http://alexshook.github.io/"/>
  <updated>2015-04-30T09:17:47-04:00</updated>
  <id>http://alexshook.github.io/</id>
  <author>
    <name><![CDATA[Alex Shook]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learn Ruby the Hard Way (Again)]]></title>
    <link href="http://alexshook.github.io/blog/learn-ruby-the-hard-way-again/"/>
    <updated>2015-04-29T23:27:15-04:00</updated>
    <id>http://alexshook.github.io/blog/learn-ruby-the-hard-way-again</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been more than a year since I last did <a href="http://learnrubythehardway.org/book/">Learn Ruby the Hard Way</a>. Now that Ruby is at version 2.2, I&rsquo;ve been thinking that it&rsquo;s probably a good time for a basics refresher. I only got through Exercise 34 or so before WDI started, and I remember it being one of the more difficult beginning Ruby things that I did.</p>

<p>It&rsquo;s really interesting to see how I look at things now compared to 1+ years ago. <!-- more --></p>

<p>I started off with <a href="http://learnrubythehardway.org/book/ex1.html">Exercise 1</a>, which is pretty basic. All you do in Exercise 1 is <code>puts</code> a bunch of strings. I predicted that I would move through the early exercises quickly.</p>

<p>I haven&rsquo;t. I completed Exercise 1 on Monday and haven&rsquo;t even gotten to Exercise 2 yet. While I was putsing the Exercise 1 strings, I started thinking about what C actually has to do to give us something as nice as typing <code>puts 'Hello!'</code> to get <code>Hello!</code> to appear in the console.</p>

<p>Compared to Java&rsquo;s <code>public class blah blah System.out.println</code> or even PHP&rsquo;s <code>echo</code> (which I always thought was vaguely unclear), <code>puts</code> is fantastically beautiful. And I never cared about it at all until now.</p>

<p>Where does it come from? How does it do what it does?</p>

<p>Puts is a kernel method, and it&rsquo;s <a href="http://ruby-doc.org/core-2.2.2/IO.html#method-i-puts">listed in I/O</a> in the Ruby documentation. Until I read the documentation, I never knew you could <code>puts</code> like this:</p>

<p><code>puts("this", "is", "a", "test")</code></p>

<p>with strings separated by commas. I can&rsquo;t think of anything I&rsquo;d ever want to use that for, but it&rsquo;s still interesting. Things got even more interesting when I took a look at the source code. Here&rsquo;s what C does when you <code>puts</code> in Ruby:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>           VALUE
</span><span class='line'>rb_io_puts(int argc, const VALUE *argv, VALUE out)
</span><span class='line'>{
</span><span class='line'>int i;
</span><span class='line'>VALUE line;
</span><span class='line'>
</span><span class='line'>/* if no argument given, print newline. */
</span><span class='line'>if (argc == 0) {
</span><span class='line'>    rb_io_write(out, rb_default_rs);
</span><span class='line'>    return Qnil;
</span><span class='line'>}
</span><span class='line'>for (i=0; i&lt;argc; i++) {
</span><span class='line'>    if (RB_TYPE_P(argv[i], T_STRING)) {
</span><span class='line'>        line = argv[i];
</span><span class='line'>        goto string;
</span><span class='line'>    }
</span><span class='line'>    if (rb_exec_recursive(io_puts_ary, argv[i], out)) {
</span><span class='line'>        continue;
</span><span class='line'>    }
</span><span class='line'>    line = rb_obj_as_string(argv[i]);
</span><span class='line'>  string:
</span><span class='line'>    rb_io_write(out, line);
</span><span class='line'>    if (RSTRING_LEN(line) == 0 ||
</span><span class='line'>        !str_end_with_asciichar(line, '\n')) {
</span><span class='line'>        rb_io_write(out, rb_default_rs);
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>return Qnil;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Looks kind of crazy. I think I got about 50% of that post-Google, and that&rsquo;s probably on the optimistic side. I did learn that a <code>Qnil</code> is the C constant for Ruby&rsquo;s nil value. That might come in handy if I ever get ambitious and want to write an extension.</p>

<p>I was going to start <a href="http://c.learncodethehardway.org/book/">Learn C the Hard Way</a> after I finished with Ruby, but instead I think I&rsquo;m going to start right away.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apparently You Can't Call .checked on a jQuery Object]]></title>
    <link href="http://alexshook.github.io/blog/cant-call-checked-on-jquery-objects/"/>
    <updated>2015-03-31T22:46:07-04:00</updated>
    <id>http://alexshook.github.io/blog/cant-call-checked-on-jquery-objects</id>
    <content type="html"><![CDATA[<p>Is the <code>.checked</code> property not working for you? It could be because you are using a jQuery object. You can&rsquo;t call <code>.checked</code> on a jQuery object.</p>

<p>Well, you can.</p>

<p>But if you do, you will lose 25 mintues to thinking that you must have a typo somewhere, and/or that you are just doing it wrong. And at the end of the 25 minutes, you will discover that you have two options: (1) use plain old vanilla JavaScript, or (2) use jQuery&rsquo;s <code>.get()</code> to retrieve the actual DOM object.</p>

<p>Thank the JavaScript deities for other programmers. After 25 minutes of thinking that I was taking crazy pills, <a href="http://stackoverflow.com/questions/3334935/checked-true-not-working-with-jquery-function" target="_blank">this Stack Overflow question</a> ended up saving me.</p>

<p>I knew this newfangled jQuery library was going to be trouble right from the start&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oh Hey.]]></title>
    <link href="http://alexshook.github.io/blog/oh-hey/"/>
    <updated>2015-03-16T23:48:15-04:00</updated>
    <id>http://alexshook.github.io/blog/oh-hey</id>
    <content type="html"><![CDATA[<p>Somehow I completely messed up this Octopress— installed a new theme, lost half of the source files (but not master?), and moved all the old posts from 2013 to a random folder. I even don’t know how that happened, but it happened.</p>

<p>When I started this blog, it was the beginning of my first Ruby class and I clearly did not know what I was doing. A year and a half later, I hope I&rsquo;m a bit wiser.</p>

<p>And that I can keep my posts together.</p>

<p>I thought now would probably be a good time to finally settle on a theme and get a fresh start.</p>

<p>Hello.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes From First Class]]></title>
    <link href="http://alexshook.github.io/blog/notes-from-first-class/"/>
    <updated>2013-10-21T21:08:00-04:00</updated>
    <id>http://alexshook.github.io/blog/notes-from-first-class</id>
    <content type="html"><![CDATA[<p>Almost the end of my first BEWD class. We made a blog.</p>
]]></content>
  </entry>
  
</feed>
